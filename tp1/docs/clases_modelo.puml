@startumltitle <u>DIAGRAMA DE CLASES DEL MODELO</u>end titleskinparam titleBorderRoundCorner 15skinparam titleBorderThickness 2skinparam titleBorderColor DarkGrayskinparam titleBackgroundColor LightGray                ' ==== TABLERO ==== class Juego {  - {static} DIST_RECOLECTABLES int = 3 {readOnly}  - {static} SCORE_RECOLECTABLES int = 100 {readOnly}  - {static} SCORE_MOVIMIENTO int = 5 {readOnly}  - {static} SCORE_TELEPORT int = 10 {readOnly}  - {static} FACTOR_VICTORIA_ROBOT int = 50 {readOnly}   - grilla: Grilla  - filas: int  - columnas: int  - heroe: Heroe  - robots: ArrayList<Robot>  - nivel: int  - score: int    <<Create>> construir(filas: int, columnas: int): Juego  + iniciarPartida(nivel: int): void  + resetScore(): void  + avanzarNivel(): void  - ubicarRecolectables(): void  - crearRobots(cantidad: int, creador: BiFunction<Celda, Grilla, Robot>): void  + procesarTurno(resultado: Resultado): Evento  + mover(direccion: Direccion): Evento  + teletransportar(): Evento  + teletransportarSeg(fila: int, columna: int): Evento}class Celda {  ~ fila: int  ~ columna: int  - incendio: Boolean  - recolectable: Boolean  - robot: Robot  - heroe: Heroe    <<Create>> construir(fila: int, columna: int): Celda  + equals(otra: Celda): Boolean  + getFila(): int  + getColumna(): int  + setRecolectable(): void  + estaIncendiada(): Boolean  + tieneRecolectable(): Boolean  + borrarHeroe(): void  + borrarRobot(): void  + ubicar(h: Heroe): Resultado  + ubicar(r: Robot): Resultado  + direccionHacia(Celda otra): int[]}class Grilla {  - filas: int  - columnas: int  - celdas: Celda[][]  <<Create>> construir(filas: int, columnas: int): Grilla  - inicializarCeldas(): void  + getCelda(fila: int, columna: int): Celda  + getCentro(): Celda  + getCeldaAleatoria(): Celda  + distanciaEntre(c1: Celda, c2: Celda): int}enum Direccion {  NORTE  SUR  ESTE  OESTE  NORESTE  NOROESTE  SURESTE  SUROESTE  QUIETO}enum Evento {  EN_PROCESO  VICTORIA  GAME_OVER}enum Resultado {  MOV_VALIDO  MOV_INVALIDO  GAME_OVER  RECOLECTADO  INCENDIADO  DESTRUIDO}                ' ==== ENTIDADES ====   abstract class Personaje {  # grilla: Grilla  # celda: Celda  <<Create>> construir(celda: Celda, grilla: Grilla): Personaje  + getCelda(): Celda  + mover(destino: Celda): Resultado}class Heroe extends Personaje {  - teletransportesSeguros: int  <<Create>> construir(inicio: Celda, grilla: Grilla, nSeguros: int): Heroe  + mover(destino: Celda): Resultado  + calcularCeldaDestino(direccion: Direccion): Celda  + teletransportar(): Resultado  + teletransportarSeguro(destino: Celda): Resultado  + getTeletransportesSeguros(): int}abstract class Robot extends Personaje {  # nCeldas: int  # estaVivo: Boolean  <<Create>> construir(celda: Celda, grilla: Grilla): Robot  + mover(celdaObjetivo: Celda): Resultado  + getTipoRobot(): int  + morir(): void  + estaMuerto(): boolean  - buscarDestinoAlternativo(objetivo: Celda): Celda}class Robot1x extends Robotclass Robot2x extends Robot                ' ==== RELACIONES ====Juego *-- GrillaJuego *-- PersonajeJuego --> ResultadoJuego --> DireccionJuego --> EventoGrilla "1" *-- "*" CeldaCelda o-- RobotCelda o-- HeroeCelda --> ResultadoPersonaje *-- GrillaPersonaje *-- CeldaPersonaje --> ResultadoHeroe --> Direccion@enduml